{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { readFileSync, readdirSync } from 'fs';\nimport { join } from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = join(process.cwd(), 'blog');\nexport function getAllSlugs() {\n  return readdirSync(postsDirectory).filter(path => path.endsWith('.md'));\n}\nexport function getPostBySlug(slug) {\n  const filename = slug.replace(/\\.md$/, '');\n  const path = join(postsDirectory, `${filename}.md`);\n  const text = readFileSync(path, 'utf-8');\n  const {\n    data,\n    content\n  } = matter(text);\n  return {\n    frontmatter: _objectSpread(_objectSpread({}, data), {}, {\n      date: new Date(data.date).toJSON()\n    }),\n    html: content,\n    slug\n  };\n}\nexport function getAllPosts() {\n  const slugs = getAllSlugs();\n  const posts = slugs.map(slug => getPostBySlug(slug)).sort((post1, post2) => post1.date > post2.date ? '-1' : '1');\n  return posts;\n}","map":{"version":3,"sources":["D:/Workspace/Maintaining/iamnabil/api.js"],"names":["readFileSync","readdirSync","join","matter","postsDirectory","process","cwd","getAllSlugs","filter","path","endsWith","getPostBySlug","slug","filename","replace","text","data","content","frontmatter","date","Date","toJSON","html","getAllPosts","slugs","posts","map","sort","post1","post2"],"mappings":";;;;;;AAAA,SAASA,YAAT,EAAuBC,WAAvB,QAA0C,IAA1C;AACA,SAASC,IAAT,QAAqB,MAArB;AAEA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAR,EAAD,EAAgB,MAAhB,CAA3B;AAEA,OAAO,SAASC,WAAT,GAAuB;AAC7B,SAAON,WAAW,CAACG,cAAD,CAAX,CAA4BI,MAA5B,CAAmCC,IAAI,IAAIA,IAAI,CAACC,QAAL,CAAc,KAAd,CAA3C,CAAP;AACA;AAED,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AACnC,QAAMC,QAAQ,GAAGD,IAAI,CAACE,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAjB;AACA,QAAML,IAAI,GAAGP,IAAI,CAACE,cAAD,EAAkB,GAAES,QAAS,KAA7B,CAAjB;AACA,QAAME,IAAI,GAAGf,YAAY,CAACS,IAAD,EAAO,OAAP,CAAzB;AAEA,QAAM;AAAEO,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBd,MAAM,CAACY,IAAD,CAAhC;AAEA,SAAO;AACNG,IAAAA,WAAW,kCACPF,IADO;AAEVG,MAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASJ,IAAI,CAACG,IAAd,EAAoBE,MAApB;AAFI,MADL;AAKNC,IAAAA,IAAI,EAAEL,OALA;AAMNL,IAAAA;AANM,GAAP;AAQA;AAED,OAAO,SAASW,WAAT,GAAuB;AAC7B,QAAMC,KAAK,GAAGjB,WAAW,EAAzB;AACA,QAAMkB,KAAK,GAAGD,KAAK,CACjBE,GADY,CACRd,IAAI,IAAID,aAAa,CAACC,IAAD,CADb,EAEZe,IAFY,CAEP,CAACC,KAAD,EAAQC,KAAR,KAAmBD,KAAK,CAACT,IAAN,GAAaU,KAAK,CAACV,IAAnB,GAA0B,IAA1B,GAAiC,GAF7C,CAAd;AAIA,SAAOM,KAAP;AACA","sourcesContent":["import { readFileSync, readdirSync } from 'fs'\nimport { join } from 'path'\n\nimport matter from 'gray-matter'\n\nconst postsDirectory = join(process.cwd(), 'blog')\n\nexport function getAllSlugs() {\n\treturn readdirSync(postsDirectory).filter(path => path.endsWith('.md'))\n}\n\nexport function getPostBySlug(slug) {\n\tconst filename = slug.replace(/\\.md$/, '')\n\tconst path = join(postsDirectory, `${filename}.md`)\n\tconst text = readFileSync(path, 'utf-8')\n\n\tconst { data, content } = matter(text)\n\n\treturn {\n\t\tfrontmatter: {\n\t\t\t...data,\n\t\t\tdate: new Date(data.date).toJSON()\n\t\t},\n\t\thtml: content,\n\t\tslug\n\t}\n}\n\nexport function getAllPosts() {\n\tconst slugs = getAllSlugs()\n\tconst posts = slugs\n\t\t.map(slug => getPostBySlug(slug))\n\t\t.sort((post1, post2) => (post1.date > post2.date ? '-1' : '1'))\n\n\treturn posts\n}\n"]},"metadata":{},"sourceType":"module"}