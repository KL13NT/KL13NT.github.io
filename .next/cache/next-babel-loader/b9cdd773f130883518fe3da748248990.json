{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { readFileSync, readdirSync } from 'fs';\nimport { join } from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = join(process.cwd(), 'blog');\nexport function getAllSlugs() {\n  return readdirSync(postsDirectory).filter(path => path.endsWith('.md'));\n}\nexport function getPostBySlug(slug) {\n  const filename = slug.replace(/\\.md$/, '');\n  const path = join(postsDirectory, `${filename}.md`);\n  const text = readFileSync(path, 'utf-8');\n  const {\n    data,\n    content\n  } = matter(text);\n  return {\n    frontmatter: _objectSpread(_objectSpread({}, data), {}, {\n      date: new Date(data.date).toJSON()\n    }),\n    html: content,\n    slug\n  };\n}\nexport function getAllPosts() {\n  const slugs = getAllSlugs();\n  const posts = slugs.map(slug => getPostBySlug(slug)).sort((post1, post2) => post1.date > post2.date ? '-1' : '1');\n  return posts;\n}","map":null,"metadata":{},"sourceType":"module"}