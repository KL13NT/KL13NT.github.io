{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable react/display-name */\nimport fs from 'fs';\nimport matter from 'gray-matter';\nimport React from 'react';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport Navbar from '../components/Navbar';\nimport { PostList } from '../components/PostList';\nexport default (({\n  posts\n}) => {\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(SEO, {}), /*#__PURE__*/_jsx(Navbar, {\n      about: true,\n      home: false\n    }), /*#__PURE__*/_jsxs(Layout, {\n      children: [/*#__PURE__*/_jsx(\"h1\", {\n        children: \"Thoughts\"\n      }), /*#__PURE__*/_jsx(\"p\", {\n        children: \"These are not entirely thoughts.\"\n      }), /*#__PURE__*/_jsx(PostList, {\n        posts: posts\n      })]\n    })]\n  });\n});\nexport async function getStaticProps() {\n  // TODO: replace hardcoded directory with a config value\n  const posts = fs.readdirSync('blog').filter(path => path.endsWith('.md')).map(path => {\n    const file = fs.readFileSync(`blog/${path}`, 'utf-8');\n    const parsed = matter(file);\n    return _objectSpread(_objectSpread({}, parsed.data), {}, {\n      date: parsed.data.date.toJSON()\n    });\n  });\n  return {\n    props: {\n      posts\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}